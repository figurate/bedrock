AWSTemplateFormatVersion: 2010-09-09

Description: A Cloudformation template for provisioning EC2 nodes for an ECS cluster.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC used to provision cluster
  ClusterName:
    Type: String
    Description: The ECS cluster name
  EcsLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for cluster load balancer
  BastionSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for bastion host
  ClusterImageId:
    Type: AWS::EC2::Image::Id
    Description: Cluster AMI ID
  InstanceType:
    Type: String
    Description: EC2 instance type
  SpotPrice:
    Type: String
    Description: The maximum price for Spot EC2 instances (zero to disable Spot)
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Applicable availability zones
  AutoScalingSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Applicable subnets for the cluster autoscaling group
  AutoscaleMin:
    Type: Number
    Description: Minimum nodes that can be launched in the cluster
  AutoscaleMax:
    Type: Number
    Description: Maximum nodes that can be launched in the cluster
  AutoscaleDesired:
    Type: Number
    Description: Desired number of nodes launched in the cluster

Conditions:
  SpotClusterEnabled:
    !Not [!Equals [!Ref SpotPrice, '0']]

Resources:
  EcsClusterEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ClusterName}-SG
      GroupDescription: Security group for ECS cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 61000
          SourceSecurityGroupId: !Ref EcsLoadBalancerSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-SG

  EcsClusterEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub ${ClusterName}-EC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*

  EcsClusterEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsClusterEC2Role

#  'Fn::Transform':
#    Name: AWS::Include
#    Parameters:
#      Location: !Sub ${BucketUrl}/${NodeType}_launch_config.yml

  EcsClusterEC2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ClusterImageId
      InstanceType: !Ref InstanceType
      InstanceMonitoring: true
      IamInstanceProfile: !Ref EcsClusterEC2InstanceProfile
      SecurityGroups:
        - !Ref EcsClusterEC2SG
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  EcsClusterSpotLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SpotPrice: !Ref SpotPrice
      InstanceMonitoring: true
      IamInstanceProfile: !Ref EcsClusterEC2InstanceProfile
      SecurityGroups:
        - !Ref EcsClusterEC2SG
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config


  EcsClusterEC2Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !If [SpotClusterEnabled, !Ref EcsClusterSpotLaunchConfig, !Ref EcsClusterEC2LaunchConfig]
      AvailabilityZones: !Ref AvailabilityZones
      VPCZoneIdentifier: !Ref AutoScalingSubnets
      MinSize: !Ref AutoscaleMin
      MaxSize: !Ref AutoscaleMax
      DesiredCapacity: !Ref AutoscaleDesired
      TerminationPolicies: ['OldestInstance']
      Tags:
        - Key: Name
          Value: !Ref ClusterName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - AlarmNotifications
          - ScheduledActions

  EcsClusterEC2ScheduleStart:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref EcsClusterEC2Asg
      MinSize: !Ref AutoscaleMin
      MaxSize: !Ref AutoscaleMax
      DesiredCapacity: !Ref AutoscaleDesired
      Recurrence: !Ref AsgStartSchedule

  EcsClusterEC2ScheduleStop:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref EcsClusterEC2Asg
      MinSize: 0
      MaxSize: !Ref AutoscaleMax
      DesiredCapacity: 0
      Recurrence: !Ref AsgStopSchedule

  EcsClusterEC2Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${ClusterName}
      DashboardBody: !Sub |
        {}

Outputs:
